diff --git a/node_modules/unzipper/lib/extract.js b/node_modules/unzipper/lib/extract.js
index 1be17c0..0ba5e4b 100644
--- a/node_modules/unzipper/lib/extract.js
+++ b/node_modules/unzipper/lib/extract.js
@@ -1,55 +1,63 @@
-module.exports = Extract;
+module.exports = Extract
 
-var Parse = require('./parse');
-var Writer = require('fstream').Writer;
-var path = require('path');
-var stream = require('stream');
-var duplexer2 = require('duplexer2');
-var Promise = require('bluebird');
+const {Writer} = require('fstream')
+const path = require('path')
+const stream = require('stream')
+const duplexer2 = require('duplexer2')
+const Promise = require('bluebird')
+const Parse = require('./parse')
 
-function Extract (opts) {
+function Extract(opts) {
   // make sure path is normalized before using it
-  opts.path = path.normalize(opts.path);
+  opts.path = path.normalize(opts.path)
 
-  var parser = new Parse(opts);
+  const parser = new Parse(opts)
 
-  var outStream = new stream.Writable({objectMode: true});
+  const outStream = new stream.Writable({ objectMode: true })
   outStream._write = function(entry, encoding, cb) {
-
-    if (entry.type == 'Directory') return cb();
+    if (entry.type == 'Directory') return cb()
 
     // to avoid zip slip (writing outside of the destination), we resolve
     // the target path, and make sure it's nested in the intended
     // destination, or not extract it otherwise.
-    var extractPath = path.join(opts.path, entry.path);
+    const extractPath = path.join(opts.path, entry.path)
     if (extractPath.indexOf(opts.path) != 0) {
-      return cb();
+      return cb()
     }
 
-    const writer = opts.getWriter ? opts.getWriter({path: extractPath}) :  Writer({ path: extractPath });
+    const writer = opts.getWriter
+      ? opts.getWriter({ path: extractPath })
+      : Writer({ path: extractPath })
 
-    entry.pipe(writer)
+    entry
+      .pipe(writer)
       .on('error', cb)
-      .on('close', cb);
-  };
+      .on('close', cb)
+  }
 
-  var extract = duplexer2(parser,outStream);
+  const extract = duplexer2(parser, outStream)
   parser.once('crx-header', function(crxHeader) {
-    extract.crxHeader = crxHeader;
-  });
+    extract.crxHeader = crxHeader
+  })
+
+  parser.on('entry', function(entry) {
+    extract.emit('entry', entry)
+  })
+
+  parser.on('data', function(data) {
+    extract.emit('data', data)
+  })
 
-  parser
-    .pipe(outStream)
-    .on('finish',function() {
-      extract.emit('close');
-    });
+  parser.pipe(outStream).on('finish', function() {
+    extract.emit('close')
+  })
 
   extract.promise = function() {
     return new Promise(function(resolve, reject) {
-      extract.on('close', resolve);
-      extract.on('error',reject);
-    });
-  };
+      extract.on('close', resolve)
+      extract.on('error', reject)
+    })
+  }
 
-  return extract;
+  return extract
 }
